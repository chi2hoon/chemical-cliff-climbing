# https://www.toptal.com/developers/gitignore/api/python,visualstudiocode 에서 생성됨
# https://www.toptal.com/developers/gitignore?templates=python,visualstudiocode 에서 편집
### API 키 절대 업로드 금지 ###
.DS_Store
openAI_key.txt
AGENTS.md
### Python ###
# 바이트 컴파일된 / 최적화된 / DLL 파일들
__pycache__/
*.py[cod]
*$py.class

# C 확장자
*.so

# 배포 / 패키징
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  일반적으로 이러한 파일들은 PyInstaller가 exe를 빌드하기 전에
#  템플릿에서 파이썬 스크립트에 의해 작성되며, 날짜/기타 정보를 삽입합니다.
*.manifest
*.spec

# 설치 로그
pip-log.txt
pip-delete-this-directory.txt

# 단위 테스트 / 커버리지 보고서
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# 번역 파일들
*.mo
*.pot

# Django 관련:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask 관련:
instance/
.webassets-cache

# Scrapy 관련:
.scrapy

# Sphinx 문서
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   라이브러리나 패키지의 경우, 코드가 여러 환경에서 실행되도록 설계되었으므로
#   이러한 파일들을 무시할 수 있습니다. 그렇지 않으면 버전 컨트롤에 포함하세요:
# .python-version

# pipenv
#   pypa/pipenv#598에 따르면, Pipfile.lock를 버전 컨트롤에 포함하는 것이 권장됩니다.
#   그러나 협업 시 플랫폼별 종속성이 있거나 크로스 플랫폼 지원이 없는 종속성이 있는 경우,
#   pipenv가 작동하지 않는 종속성을 설치하거나 필요한 종속성을 모두 설치하지 않을 수 있습니다.
#Pipfile.lock

# poetry
#   Pipfile.lock과 유사하게, 일반적으로 poetry.lock을 버전 컨트롤에 포함하는 것이 권장됩니다.
#   이는 특히 바이너리 패키지의 재현성을 보장하기 위해 권장되며, 라이브러리의 경우 더 일반적으로 무시됩니다.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Pipfile.lock과 유사하게, 일반적으로 pdm.lock을 버전 컨트롤에 포함하는 것이 권장됩니다.
#pdm.lock
#   pdm은 프로젝트 전체 설정을 .pdm.toml에 저장하지만, 버전 컨트롤에 포함하지 않는 것이 권장됩니다.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; github.com/David-OConnor/pyflow 및 github.com/pdm-project/pdm 등에서 사용
__pypackages__/

# Celery 관련
celerybeat-schedule
celerybeat.pid

# SageMath 파싱된 파일들
*.sage.py

# 가상환경
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder 프로젝트 설정
.spyderproject
.spyproject

# Rope 프로젝트 설정
.ropeproject

# mkdocs 문서
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre 타입 체커
.pyre/

# pytype 정적 타입 분석기
.pytype/

# Cython 디버그 심볼
cython_debug/

# PyCharm
#  JetBrains 전용 템플릿은 별도의 JetBrains.gitignore에서 유지되며,
#  https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore 에서 찾을 수 있습니다.
#  이를 글로벌 gitignore에 추가하거나 이 파일에 병합할 수 있습니다.
#  더 강력한 옵션(권장하지 않음)으로 다음 줄을 주석 해제하여 전체 idea 폴더를 무시할 수 있습니다.
#.idea/

### Python 패치 ###
# Poetry 로컬 설정 파일 - https://python-poetry.org/docs/configuration/#local-configuration
poetry.toml

# ruff
.ruff_cache/

# LSP 설정 파일들
pyrightconfig.json

### VisualStudioCode ###
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
!.vscode/*.code-snippets

# Visual Studio Code 로컬 히스토리
.history/

# 빌드된 Visual Studio Code 확장자
*.vsix

### VisualStudioCode 패치 ###
# 모든 파일의 로컬 히스토리 무시
.history
.ionide

# 개인 작업 파일들
hypotheses/
SESSION_NOTES.md

# hoon/ 특화 규칙
hoon/notebooks/
hoon/data/archive/
hoon/logs/hypothesis/
hoon/screenshots/
hoon/.cursor/

# 메달리온 아키텍처: 파이프라인 산출물 제외 (Bronze/Silver/Gold/Quarantine)
# 변경된 메달리온 아키텍처 규칙
# 메달리온 아키텍처: 파생 데이터 제외 (artifacts만 포함)
hoon/data/bronze/*
!hoon/data/bronze/artifacts/
hoon/data/silver/
hoon/data/gold/
hoon/data/quarantine/

# https://www.toptal.com/developers/gitignore/api/python,visualstudiocode 끝

# 메달리온 아키텍처: 파생 데이터 제외 (빈 artifacts 폴더만 포함)
evaluations/
# === aiffelthon base/data rules ===
/base/data/*
!/base/data/bronze/
# bronze 하위는 기본 무시
/base/data/bronze/**
# artifacts 폴더만 허용
!/base/data/bronze/artifacts/
# artifacts 내부는 기본 무시
/base/data/bronze/artifacts/**
# 단, 4개의 원본 파일만 추적
!/base/data/bronze/artifacts/2017_raw.xlsx
!/base/data/bronze/artifacts/2018_raw.xlsx
!/base/data/bronze/artifacts/2020_raw.xlsx
!/base/data/bronze/artifacts/2021_raw.xlsx
# === end aiffelthon base/data rules ===
